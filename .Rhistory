absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 260, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
# selectInput("color", "Color", vars),
# selectInput("size", "Size", vars, selected = "adultpop"),
# conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
#                  # Only prompt for threshold when coloring or sizing by superzip
#                  numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
# ),
#
uiOutput("contents"),
),
)
runApp()
map_container <- tabPanel(title = "Map",
value = "map_container",
hr(),
fluidRow(
column(3, align="center",
checkboxInput(inputId = "eatingout", label = "Eating Out", value = TRUE),
actionButton("filterForEatingout", "filter")
),
column(3, align="center",
checkboxInput(inputId = "hotels", label = "Hotels", value = TRUE),
actionButton("filterForHotels", "filter")
),
column(3, align="center",
checkboxInput(inputId = "events", label = "Events", value = TRUE),
actionButton("filterForEvents", "filter")
),
column(3, align="center",
checkboxInput(inputId = "attractions", label = "Attractions", value = TRUE),
actionButton("filterForAttractions", "filter")
),
),
hr(),
div(class="outer",
tags$style(HTML(
"div.outer {
position: fixed;
top: 300px;
left: 0;
right: 0;
bottom: 0;
overflow: hidden;
padding: 0;
}")),
leafletOutput("mymap", width="100%", height="100%")),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 260, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
# selectInput("color", "Color", vars),
# selectInput("size", "Size", vars, selected = "adultpop"),
# conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
#                  # Only prompt for threshold when coloring or sizing by superzip
#                  numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
# ),
#
uiOutput("contents"),
),
)
runApp()
map_container <- tabPanel(title = "Map",
value = "map_container",
hr(),
fluidRow(
column(3, align="center",
checkboxInput(inputId = "eatingout", label = "Eating Out", value = TRUE),
actionButton("filterForEatingout", "filter")
),
column(3, align="center",
checkboxInput(inputId = "hotels", label = "Hotels", value = TRUE),
actionButton("filterForHotels", "filter")
),
column(3, align="center",
checkboxInput(inputId = "events", label = "Events", value = TRUE),
actionButton("filterForEvents", "filter")
),
column(3, align="center",
checkboxInput(inputId = "attractions", label = "Attractions", value = TRUE),
actionButton("filterForAttractions", "filter")
),
),
hr(),
div(class="outer",
tags$style(HTML(
"div.outer {
position: fixed;
top: 280px;
left: 0;
right: 0;
bottom: 0;
overflow: hidden;
padding: 0;
}")),
leafletOutput("mymap", width="100%", height="100%")),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 260, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
# selectInput("color", "Color", vars),
# selectInput("size", "Size", vars, selected = "adultpop"),
# conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
#                  # Only prompt for threshold when coloring or sizing by superzip
#                  numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
# ),
#
uiOutput("contents"),
),
)
runApp()
map_container <- tabPanel(title = "Map",
value = "map_container",
hr(),
fluidRow(
column(3, align="center",
checkboxInput(inputId = "eatingout", label = "Eating Out", value = TRUE),
actionButton("filterForEatingout", "filter")
),
column(3, align="center",
checkboxInput(inputId = "hotels", label = "Hotels", value = TRUE),
actionButton("filterForHotels", "filter")
),
column(3, align="center",
checkboxInput(inputId = "events", label = "Events", value = TRUE),
actionButton("filterForEvents", "filter")
),
column(3, align="center",
checkboxInput(inputId = "attractions", label = "Attractions", value = TRUE),
actionButton("filterForAttractions", "filter")
),
),
hr(),
div(class="outer",
tags$style(HTML(
"div.outer {
position: fixed;
top: 270px;
left: 0;
right: 0;
bottom: 0;
overflow: hidden;
padding: 0;
}")),
leafletOutput("mymap", width="100%", height="100%")),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 260, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
# selectInput("color", "Color", vars),
# selectInput("size", "Size", vars, selected = "adultpop"),
# conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
#                  # Only prompt for threshold when coloring or sizing by superzip
#                  numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
# ),
#
uiOutput("contents"),
),
)
runApp()
map_container <- tabPanel(title = "Map",
value = "map_container",
hr(),
fluidRow(
column(3, align="center",
checkboxInput(inputId = "eatingout", label = "Eating Out", value = TRUE),
actionButton("filterForEatingout", "filter")
),
column(3, align="center",
checkboxInput(inputId = "hotels", label = "Hotels", value = TRUE),
actionButton("filterForHotels", "filter")
),
column(3, align="center",
checkboxInput(inputId = "events", label = "Events", value = TRUE),
actionButton("filterForEvents", "filter")
),
column(3, align="center",
checkboxInput(inputId = "attractions", label = "Attractions", value = TRUE),
actionButton("filterForAttractions", "filter")
),
),
hr(),
div(class="outer",
tags$style(HTML(
"div.outer {
position: fixed;
top: 265px;
left: 0;
right: 0;
bottom: 0;
overflow: hidden;
padding: 0;
}")),
leafletOutput("mymap", width="100%", height="100%")),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 260, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
# selectInput("color", "Color", vars),
# selectInput("size", "Size", vars, selected = "adultpop"),
# conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
#                  # Only prompt for threshold when coloring or sizing by superzip
#                  numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
# ),
#
uiOutput("contents"),
),
)
runApp()
map_container <- tabPanel(title = "Map",
value = "map_container",
hr(),
fluidRow(
column(3, align="center",
checkboxInput(inputId = "eatingout", label = "Eating Out", value = TRUE),
actionButton("filterForEatingout", "filter")
),
column(3, align="center",
checkboxInput(inputId = "hotels", label = "Hotels", value = TRUE),
actionButton("filterForHotels", "filter")
),
column(3, align="center",
checkboxInput(inputId = "events", label = "Events", value = TRUE),
actionButton("filterForEvents", "filter")
),
column(3, align="center",
checkboxInput(inputId = "attractions", label = "Attractions", value = TRUE),
actionButton("filterForAttractions", "filter")
),
),
hr(),
div(class="outer",
tags$style(HTML(
"div.outer {
position: fixed;
top: 260px;
left: 0;
right: 0;
bottom: 0;
overflow: hidden;
padding: 0;
}")),
leafletOutput("mymap", width="100%", height="100%")),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 260, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
# selectInput("color", "Color", vars),
# selectInput("size", "Size", vars, selected = "adultpop"),
# conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
#                  # Only prompt for threshold when coloring or sizing by superzip
#                  numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
# ),
#
uiOutput("contents"),
),
)
runApp()
map_container <- tabPanel(title = "Map",
value = "map_container",
hr(),
fluidRow(
column(3, align="center",
checkboxInput(inputId = "eatingout", label = "Eating Out", value = TRUE),
actionButton("filterForEatingout", "filter")
),
column(3, align="center",
checkboxInput(inputId = "hotels", label = "Hotels", value = TRUE),
actionButton("filterForHotels", "filter")
),
column(3, align="center",
checkboxInput(inputId = "events", label = "Events", value = TRUE),
actionButton("filterForEvents", "filter")
),
column(3, align="center",
checkboxInput(inputId = "attractions", label = "Attractions", value = TRUE),
actionButton("filterForAttractions", "filter")
),
),
hr(),
div(class="outer",
tags$style(HTML(
"div.outer {
position: fixed;
top: 259px;
left: 0;
right: 0;
bottom: 0;
overflow: hidden;
padding: 0;
}")),
leafletOutput("mymap", width="100%", height="100%")),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 260, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
# selectInput("color", "Color", vars),
# selectInput("size", "Size", vars, selected = "adultpop"),
# conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
#                  # Only prompt for threshold when coloring or sizing by superzip
#                  numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
# ),
#
uiOutput("contents"),
),
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
"1" + "2"
runApp()
runApp()
runApp()
View(eatingout)
runApp()
runApp()
strHAHA <- "HAHA"
strHAHA[0]
strHAHA[1]
adkhaskd <- substr(strHAHA, 1, 1)
adkhaskd
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(event_data)
View(event_data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(eatingout)
runApp()
runApp()
runApp()
View(eatingout)
View(eatingout)
runApp()
View(eatingout)
View(eatingout)
eatingout <- read.csv(file.path(DATA_FOLDER, "eatingout.csv"))
View(eatingout)
runApp()
View(eatingout)
runApp()
View(eatingout)
runApp()
View(eatingout)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c("1", "2")
toString(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
eatingTags <- str_split(substr(data[0, "Tags"], 3, nchar(data[0, "Tags"]) - 2), "', '")
eatingTags <- str_split(substr(eatingout[0, "Tags"], 3, nchar(eatingout[0, "Tags"]) - 2), "', '")
eatingTags
runApp()
runApp()
View(hotels)
runApp()
runApp()
runApp()
runApp()
about <- tabPanel(title = "About us",
value = "about",
br(), hr(),
includeHTML(rmarkdown::render('descriptions/Dongli.Rmd')), br(),
includeHTML(rmarkdown::render('descricoes/LouhaoFang.Rmd')), br(),
)
runApp()
View(event_data)
View(event_data)
View(event_data)
runApp()
View(event_data)
unique(event_data]["heading"])
unique(event_data["heading"])
a <- unique(event_data["heading"])
a
a <- unlist(unique(event_data["heading"]))
a
typeOf(a)
typeof(a)
a <- c(a)
a
a <- unique(event_data["heading"])
typeof(a)
a[1]
a[0]
a["heading"]
view[a]
runApp()
runApp()
runApp()
runApp()
map_container <- tabPanel(title = "Map",
value = "map_container",
hr(),
fluidRow(
column(3, align="center",
checkboxInput(inputId = "eatingout", label = "Eating Out", value = TRUE),
actionButton("filterForEatingout", "filter")
),
column(3, align="center",
checkboxInput(inputId = "hotels", label = "Hotels", value = TRUE),
actionButton("filterForHotels", "filter")
),
column(3, align="center",
checkboxInput(inputId = "events", label = "Events", value = TRUE),
actionButton("filterForEvents", "filter")
),
column(3, align="center",
checkboxInput(inputId = "attractions", label = "Attractions", value = TRUE),
actionButton("filterForAttractions", "filter")
),
),
hr(),
div(class="outer",
tags$style(HTML(
"div.outer {
position: fixed;
top: 259px;
left: 0;
right: 0;
bottom: 0;
overflow: hidden;
padding: 0;
}")),
leafletOutput("mymap", width="100%", height="100%")),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 260, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
# selectInput("color", "Color", vars),
# selectInput("size", "Size", vars, selected = "adultpop"),
# conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
#                  # Only prompt for threshold when coloring or sizing by superzip
#                  numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
# ),
#
uiOutput("contents"),
),
)
runApp()
runApp()
shiny::runApp()
